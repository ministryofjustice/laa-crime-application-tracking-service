
plugins {
	id 'java'
	id "jacoco"
	id "org.sonarqube" version "4.4.1.3373"
	id "info.solidsoft.pitest" version "1.15.0"
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'uk.gov.justice.laa.crime'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

def versions = [
		pitest                  : "1.15.7",
		sentryVersion			: "7.2.0"
]
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation platform("io.sentry:sentry-bom:$versions.sentryVersion")

	implementation "io.sentry:sentry-spring-boot-starter-jakarta"
	implementation "io.sentry:sentry-logback"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "org.pitest:pitest:$versions.pitest"
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/entity/**",
					"**/dto/**",
					"**/config/**"
			])
		}))
	}
}

pitest {
	targetClasses = [
			"uk.gov.justice.laa.crime.application.tracking.*",
			"uk.gov.justice.laa.crime.application.tracking.controller.*"
	]
	excludedClasses = [
			"uk.gov.justice.laa.crime.application.tracking.dto.*",
			"uk.gov.justice.laa.crime.application.tracking.mapper.*",
			"uk.gov.justice.laa.crime.application.tracking.CrimeApplicationTrackingApplication"
	]
	threads = 5
	outputFormats = ["XML", "HTML"]
	timestampedReports = false
	mutationThreshold = 60
}

tasks.named("sonar"){
	dependsOn test
}

sonar {
	properties {
		property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/exception/**.java"
		property "sonar.coverage.exclusions", "**/CrimeApplicationTrackingApplication.java"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.layout.buildDirectory}/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.projectKey", "ministryofjustice_laa-crime-application-tracking-service"
		property "sonar.organization", "ministryofjustice"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectName", "Crime Apps :: crime-application-tracking"
		property "sonar.pitest.mode", "reuseReport"
		property "sonar.pitest.reportsDirectory", "build/reports/pitest"
	}
}



